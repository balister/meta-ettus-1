From 68ee6958a3504a0e30a005c652b1bf52fd530def Mon Sep 17 00:00:00 2001
From: Philip Balister <philip@opensdr.com>
Date: Fri, 28 Oct 2016 15:28:04 -0400
Subject: [PATCH 3/4] e3xx: Add support for the Ettus Research E3XX family of
 USRP's.

Signed-off-by: Philip Balister <philip@opensdr.com>
---
 arch/arm/dts/zynq-e3xx-1.dts       |   3 +
 arch/arm/dts/zynq-e3xx-3.dts       |   3 +
 arch/arm/mach-zynq/Kconfig         |  17 +-
 board/ettus/e3xx/Makefile          |  24 +++
 board/ettus/e3xx/board.c           | 392 +++++++++++++++++++++++++++++++++++++
 board/ettus/e3xx/xil_io.h          |  13 ++
 common/spl/spl_fat.c               |   2 +
 configs/zynq_e3xx_1_defconfig      |  48 +++++
 configs/zynq_e3xx_3_defconfig      |  48 +++++
 include/configs/zynq_e3xx_1.h      |  20 ++
 include/configs/zynq_e3xx_3.h      |  21 ++
 include/configs/zynq_e3xx_common.h |  73 +++++++
 scripts/config_whitelist.txt       |   3 +
 13 files changed, 664 insertions(+), 3 deletions(-)
 create mode 100644 board/ettus/e3xx/Makefile
 create mode 100644 board/ettus/e3xx/board.c
 create mode 100644 board/ettus/e3xx/xil_io.h
 create mode 100644 configs/zynq_e3xx_1_defconfig
 create mode 100644 configs/zynq_e3xx_3_defconfig
 create mode 100644 include/configs/zynq_e3xx_1.h
 create mode 100644 include/configs/zynq_e3xx_3.h
 create mode 100644 include/configs/zynq_e3xx_common.h

diff --git a/arch/arm/dts/zynq-e3xx-1.dts b/arch/arm/dts/zynq-e3xx-1.dts
index ad03659871..e4a5995983 100644
--- a/arch/arm/dts/zynq-e3xx-1.dts
+++ b/arch/arm/dts/zynq-e3xx-1.dts
@@ -21,6 +21,7 @@
 	aliases {
 		ethernet0 = &gem0;
 		serial0 = &uart0;
+		mmc0 = &sdhci0;
 	};
 
 	memory {
@@ -40,10 +41,12 @@
 };
 
 &sdhci0 {
+	u-boot,dm-pre-reloc;
 	status = "okay";
 };
 
 &uart0 {
+	u-boot,dm-pre-reloc;
 	status = "okay";
 };
 
diff --git a/arch/arm/dts/zynq-e3xx-3.dts b/arch/arm/dts/zynq-e3xx-3.dts
index ad03659871..e4a5995983 100644
--- a/arch/arm/dts/zynq-e3xx-3.dts
+++ b/arch/arm/dts/zynq-e3xx-3.dts
@@ -21,6 +21,7 @@
 	aliases {
 		ethernet0 = &gem0;
 		serial0 = &uart0;
+		mmc0 = &sdhci0;
 	};
 
 	memory {
@@ -40,10 +41,12 @@
 };
 
 &sdhci0 {
+	u-boot,dm-pre-reloc;
 	status = "okay";
 };
 
 &uart0 {
+	u-boot,dm-pre-reloc;
 	status = "okay";
 };
 
diff --git a/arch/arm/mach-zynq/Kconfig b/arch/arm/mach-zynq/Kconfig
index b9cd45ba09..8f910b78fc 100644
--- a/arch/arm/mach-zynq/Kconfig
+++ b/arch/arm/mach-zynq/Kconfig
@@ -35,19 +35,30 @@ config ZYNQ_DDRC_INIT
 	  if required. There might be cases like ddr less where we
 	  want to skip ddr init and this option is useful for it.
 
+
+config TARGET_ETTUS_E3XX_1
+       bool "NI Ettus Research USRP E3xx (Speedgrade 1)"
+
+config TARGET_ETTUS_E3XX_3
+       bool "NI Ettus Research USRP E3xx (Speedgrade 3)"
+
 config SYS_BOARD
-	default "zynq"
+	default "zynq" if !(TARGET_ETTUS_E3XX_1 || TARGET_ETTUS_E3XX_3)
+	default "e3xx" if TARGET_ETTUS_E3XX_1 || TARGET_ETTUS_E3XX_3
 
 config SYS_VENDOR
 	string "Vendor name"
-	default "xilinx"
+	default "xilinx" if !(TARGET_ETTUS_E3XX_1 || TARGET_ETTUS_E3XX_3)
+	default "ettus" if TARGET_ETTUS_E3XX_1 || TARGET_ETTUS_E3XX_3
 
 config SYS_SOC
 	default "zynq"
 
 config SYS_CONFIG_NAME
 	string "Board configuration name"
-	default "zynq-common"
+	default "zynq_e3xx_1" if TARGET_ETTUS_E3XX_1
+	default "zynq_e3xx_3" if TARGET_ETTUS_E3XX_3
+	default "zynq-common" if !(TARGET_ETTUS_E3XX_1 || TARGET_ETTUS_E3XX_3)
 	help
 	  This option contains information about board configuration name.
 	  Based on this option include/configs/<CONFIG_SYS_CONFIG_NAME>.h header
diff --git a/board/ettus/e3xx/Makefile b/board/ettus/e3xx/Makefile
new file mode 100644
index 0000000000..bdd194f553
--- /dev/null
+++ b/board/ettus/e3xx/Makefile
@@ -0,0 +1,24 @@
+#
+# (C) Copyright 2000-2006
+# Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+# (C) Copyright 2015
+# Moritz Fischer, National Instruments Corp, moritz.fischer@ettus.com
+#
+# SPDX-License-Identifier:	GPL-2.0+
+#
+
+obj-y	:= board.o
+
+hw-platform-$(CONFIG_TARGET_ETTUS_E3XX_1)		:= e3xx_hw_platform_1
+hw-platform-$(CONFIG_TARGET_ETTUS_E3XX_3)		:= e3xx_hw_platform_3
+
+init-objs := $(if $(wildcard $(srctree)/$(src)/$(hw-platform-y)/ps7_init_gpl.c),\
+	$(hw-platform-y)/ps7_init_gpl.o)
+
+obj-$(CONFIG_SPL_BUILD) += $(init-objs)
+
+# Suppress "warning: function declaration isn't a prototype"
+CFLAGS_REMOVE_ps7_init_gpl.o := -Wstrict-prototypes
+
+# To include xil_io.h
+CFLAGS_ps7_init_gpl.o := -I$(srctree)/$(src)
diff --git a/board/ettus/e3xx/board.c b/board/ettus/e3xx/board.c
new file mode 100644
index 0000000000..95636e5544
--- /dev/null
+++ b/board/ettus/e3xx/board.c
@@ -0,0 +1,392 @@
+/*
+ * (C) Copyright 2012 Michal Simek <monstr@monstr.eu>
+ * (C) Copyright 2015 Moritz Fischer <moritz.fischer@ettus.com>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <fdtdec.h>
+#include <fpga.h>
+#include <mmc.h>
+#include <netdev.h>
+#include <i2c.h>
+#include <zynqpl.h>
+#include <asm/arch/hardware.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/gpio.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#if (defined(CONFIG_FPGA) && !defined(CONFIG_SPL_BUILD)) || \
+    (defined(CONFIG_SPL_FPGA_SUPPORT) && defined(CONFIG_SPL_BUILD))
+static xilinx_desc fpga;
+
+/* It can be done differently */
+static xilinx_desc fpga010 = XILINX_XC7Z010_DESC(0x10);
+static xilinx_desc fpga015 = XILINX_XC7Z015_DESC(0x15);
+static xilinx_desc fpga020 = XILINX_XC7Z020_DESC(0x20);
+static xilinx_desc fpga030 = XILINX_XC7Z030_DESC(0x30);
+static xilinx_desc fpga035 = XILINX_XC7Z035_DESC(0x35);
+static xilinx_desc fpga045 = XILINX_XC7Z045_DESC(0x45);
+static xilinx_desc fpga100 = XILINX_XC7Z100_DESC(0x100);
+#endif
+
+#define E3XX_I2C_DB_EEPROM_ADDR 0x50
+#define E3XX_I2C_MB_EEPROM_ADDR 0x51
+
+#define E3XX_MB_SERIAL_LEN 8
+#define E3XX_MB_NAME_LEN 32
+
+struct e3xx_db_eeprom_map {
+	u16 data_version_major;
+	u16 data_version_minor;
+	u16 hw_product;
+	u16 hw_revision;
+	u8 serial[8];
+	u8 pad[12];
+};
+
+struct e3xx_mb_eeprom_map {
+	u16 data_version_major;
+	u16 data_version_minor;
+	u8 mac_addr[6];
+	u16 hw_product;
+	u16 hw_revision;
+	u8 serial[E3XX_MB_SERIAL_LEN];
+	u8 pad[20 - E3XX_MB_SERIAL_LEN];
+	u8 user_name[E3XX_MB_NAME_LEN];
+};
+
+#define DB_ID_E310	0x0110
+#define DB_ID_E330	0x1110
+
+#define MB_ID_E3XX_OLD 0x77d2
+#define MB_ID_E3XX_NEW 0x77d3
+
+static const u8 e3xx_mb_speedgrades[] = {
+	[MB_ID_E3XX_OLD] = 1,
+	[MB_ID_E3XX_NEW] = 3,
+};
+
+static void setup_i2c(void)
+{
+	i2c_init(0, 0);
+	i2c_set_bus_num(0);
+}
+
+#ifdef CONFIG_ZYNQ_E3XX_MEM_TEST
+/* Memory test with two parts:
+ * 1) Check data bits are valid
+ * 2) Write a test pattern to RAM and check the read back values. This should
+ * catch bad / stuck address lines.
+ */
+static const u32 test_patterns[7] = {0x5555AAAA, 0xAAAA5555, 0x5A5AA5A5,
+				0xA5A55A5A, 0xF0F00F0F, 0x0F0FF0F0, 0x0000FFFF};
+
+static int mem_test(u32 start, u32 size)
+{
+	u32 *address;
+	u32 i;
+
+	return 0;
+
+	/* Walking 1s pattern on a single address */
+	address = (u32 *)start;
+	for (i = 0; i < 8*sizeof(u32); i++) {
+		*address = 1 << i;
+		if (*address != 1 << i)
+			return -1;
+	}
+
+	/* Check test pattern */
+	for (i = start; i < size/sizeof(u32); i++) {
+		if (address[i] != test_patterns[i & 0x7])
+			return -1;
+	}
+
+	return 0;
+}
+#endif /* CONFIG_ZYNQ_E3XX_MEM_TEST */
+
+#define BOARD_SWITCH_GPIO 63
+#define BOARD_SAFE_GPIO 64
+
+static int board_set_db_mux_gpio(int is_safe, int is_e33x)
+{
+	int err;
+
+	err = gpio_request(BOARD_SWITCH_GPIO,
+			   "board_switch_gpio");
+	if (err) {
+		printf("Could not get db_mux_gpio(0)\n");
+		return err;
+	}
+
+	gpio_direction_output(BOARD_SWITCH_GPIO, is_e33x);
+
+	gpio_free(BOARD_SWITCH_GPIO);
+
+	err = gpio_request(BOARD_SAFE_GPIO,
+			   "board_safe_gpio");
+	if (err) {
+		printf("Could not get db_mux_gpio(1)\n");
+		return err;
+	}
+
+	gpio_direction_output(BOARD_SAFE_GPIO, is_safe);
+
+	gpio_free(BOARD_SAFE_GPIO);
+
+	return 0;
+}
+
+static inline char num_to_letter_rev(char x)
+{
+	return (char) ('A' + x);
+}
+
+static void identify_products(void)
+{
+	u8 db_buf[sizeof(struct e3xx_db_eeprom_map)];
+	u8 mb_buf[sizeof(struct e3xx_mb_eeprom_map)];
+	u16 mb, mb_rev, db, db_rev;
+	u8 speedgrade;
+	char mstr[20];
+
+	struct e3xx_db_eeprom_map *db_map =
+		(struct e3xx_db_eeprom_map *)&db_buf[0];
+
+	struct e3xx_mb_eeprom_map *mb_map =
+		(struct e3xx_mb_eeprom_map *)&mb_buf[0];
+
+	setup_i2c();
+
+	if (i2c_probe(E3XX_I2C_MB_EEPROM_ADDR) != 0) {
+		printf("Couldn't find i2c mb eeprom\n");
+		return;
+	};
+
+	if (i2c_read(E3XX_I2C_MB_EEPROM_ADDR, 0, 1, mb_buf,
+		     sizeof(*mb_map))) {
+		printf("i2c mb eeprom read failed\n");
+	};
+	mb = ntohs(mb_map->hw_product);
+	mb_rev = ntohs(mb_map->hw_revision);
+
+	if (i2c_probe(E3XX_I2C_DB_EEPROM_ADDR) != 0) {
+		printf("Couldn't find i2c db eeprom\n");
+		return;
+	};
+
+	if (i2c_read(E3XX_I2C_DB_EEPROM_ADDR, 0, 2, db_buf,
+		     sizeof(*db_map))) {
+		printf("i2c db eeprom read failed\n");
+	};
+	db = ntohs(db_map->hw_product);
+	db_rev = ntohs(db_map->hw_revision);
+
+	/* print out motherboard info */
+	if (mb == MB_ID_E3XX_OLD) {
+		printf("MB: Found E3XX Rev%c - Speedgrade %u\n",
+		       num_to_letter_rev(mb_rev),
+		       e3xx_mb_speedgrades[MB_ID_E3XX_OLD]);
+		speedgrade = e3xx_mb_speedgrades[MB_ID_E3XX_OLD];
+	} else if (mb == MB_ID_E3XX_NEW) {
+		printf("MB: Found E3XX Rev%c - Speedgrade %u\n",
+		       num_to_letter_rev(mb_rev),
+		       e3xx_mb_speedgrades[MB_ID_E3XX_NEW]);
+		speedgrade = e3xx_mb_speedgrades[MB_ID_E3XX_NEW];
+	} else {
+		speedgrade = 0;
+		printf("*** Found unknown motherboard, please update sd card ***\n");
+		env_set("devicetree_image", "uImage-zynq-e3xx-factory.dtb");
+	}
+
+	/* print out daughterboard info and select correct image */
+	if (speedgrade == 1) {
+		if (db == DB_ID_E310) {
+			env_set("devicetree_image", "uImage-zynq-e31x-1.dtb");
+			printf("DB: Found E310 MIMO XCVR Rev%c\n",
+			       num_to_letter_rev(db_rev));
+			board_set_db_mux_gpio(1, 0);
+		} else if (db == DB_ID_E330) {
+			env_set("devicetree_image", "uImage-zynq-e33x-1.dtb");
+			printf("DB: Found E330 MIMO RCVR Rev%c\n",
+			       num_to_letter_rev(db_rev));
+			board_set_db_mux_gpio(1, 1);
+		} else {
+			env_set("devicetree_image", "uImage-zynq-e3xx-factory.dtb");
+			printf("*** Found unknown daughterboard, 0x%04x please update sd card ***\n", db);
+			board_set_db_mux_gpio(0, 0);
+		}
+	} else if (speedgrade == 3) {
+		if (db == DB_ID_E310) {
+			env_set("devicetree_image", "uImage-zynq-e31x-3.dtb");
+			printf("DB: Found E310 MIMO XCVR Rev%c\n",
+			       num_to_letter_rev(db_rev));
+			board_set_db_mux_gpio(1, 0);
+		} else if (db == DB_ID_E330) {
+			env_set("devicetree_image", "uImage-zynq-e33x-3.dtb");
+			printf("DB: Found E330 MIMO RCVR Rev%c\n",
+			       num_to_letter_rev(db_rev));
+			board_set_db_mux_gpio(1, 1);
+		} else {
+			env_set("devicetree_image", "uImage-zynq-e3xx-factory.dtb");
+			printf("*** Found unknown daughterboard, 0x%04x please update sd card ***\n", db);
+			board_set_db_mux_gpio(0, 0);
+		}
+	}
+
+	/* grab mac address */
+	sprintf(mstr, "%0X:%0X:%0X:%0X:%0X:%0X", mb_map->mac_addr[0],
+		mb_map->mac_addr[1], mb_map->mac_addr[2], mb_map->mac_addr[3],
+		mb_map->mac_addr[4], mb_map->mac_addr[5]);
+	env_set("ethaddr", mstr);
+}
+
+
+int board_init(void)
+{
+#if (defined(CONFIG_FPGA) && !defined(CONFIG_SPL_BUILD)) || \
+    (defined(CONFIG_SPL_FPGA_SUPPORT) && defined(CONFIG_SPL_BUILD))
+	u32 idcode;
+
+	idcode = zynq_slcr_get_idcode();
+
+	switch (idcode) {
+	case XILINX_ZYNQ_7010:
+		fpga = fpga010;
+		break;
+	case XILINX_ZYNQ_7015:
+		fpga = fpga015;
+		break;
+	case XILINX_ZYNQ_7020:
+		fpga = fpga020;
+		break;
+	case XILINX_ZYNQ_7030:
+		fpga = fpga030;
+		break;
+	case XILINX_ZYNQ_7035:
+		fpga = fpga035;
+		break;
+	case XILINX_ZYNQ_7045:
+		fpga = fpga045;
+		break;
+	case XILINX_ZYNQ_7100:
+		fpga = fpga100;
+		break;
+	}
+#endif
+
+#if (defined(CONFIG_FPGA) && !defined(CONFIG_SPL_BUILD)) || \
+    (defined(CONFIG_SPL_FPGA_SUPPORT) && defined(CONFIG_SPL_BUILD))
+	fpga_init();
+	fpga_add(fpga_xilinx, &fpga);
+#endif
+
+	return 0;
+}
+
+int board_late_init(void)
+{
+	int err;
+
+	switch ((zynq_slcr_get_boot_mode()) & ZYNQ_BM_MASK) {
+	case ZYNQ_BM_NOR:
+		env_set("modeboot", "norboot");
+		break;
+	case ZYNQ_BM_SD:
+		env_set("modeboot", "sdboot");
+		break;
+	case ZYNQ_BM_JTAG:
+		env_set("modeboot", "jtagboot");
+		break;
+	default:
+		env_set("modeboot", "");
+		break;
+	}
+
+	identify_products();
+
+#ifdef CONFIG_ZYNQ_E3XX_MEM_TEST
+	printf("RAM test... ");
+
+	err = mem_test(CONFIG_ZYNQ_E3XX_MEM_TEST_START,
+		       CONFIG_ZYNQ_E3XX_MEM_TEST_SIZE);
+	if (err) {
+		printf("FAILED RAM TEST!\n");
+		env_set("bootdelay", "-1");
+	} else {
+		printf("PASSED RAM TEST!\n");
+	}
+#endif /* CONFIG_ZYNQ_E3XX_MEM_TEST */
+
+	return 0;
+}
+
+#ifdef CONFIG_DISPLAY_BOARDINFO
+int checkboard(void)
+{
+	puts("Board:\tNI Ettus Research USRP E3xx SDR\n");
+	return 0;
+}
+#endif
+
+#if 0
+int dram_init(void)
+{
+#if CONFIG_IS_ENABLED(OF_CONTROL)
+	int node;
+	fdt_addr_t addr;
+	fdt_size_t size;
+	const void *blob = gd->fdt_blob;
+
+	node = fdt_node_offset_by_prop_value(blob, -1, "device_type",
+					     "memory", 7);
+	if (node == -FDT_ERR_NOTFOUND) {
+		debug("ZYNQ DRAM: Can't get memory node\n");
+		return -1;
+	}
+	addr = fdtdec_get_addr_size(blob, node, "reg", &size);
+	if (addr == FDT_ADDR_T_NONE || size == 0) {
+		debug("ZYNQ DRAM: Can't get base address or size\n");
+		return -1;
+	}
+	gd->ram_size = size;
+#else
+	gd->ram_size = CONFIG_SYS_SDRAM_SIZE;
+#endif
+	zynq_ddrc_init();
+
+	return 0;
+}
+#endif
+
+#if !defined(CONFIG_SYS_SDRAM_BASE) && !defined(CONFIG_SYS_SDRAM_SIZE)
+int dram_init_banksize(void)
+{
+	fdtdec_setup_memory_banksize();
+
+	return 0;
+}
+
+int dram_init(void)
+{
+	if (fdtdec_setup_memory_size() != 0)
+		return -EINVAL;
+
+	zynq_ddrc_init();
+
+	return 0;
+}
+#else
+int dram_init(void)
+{
+	gd->ram_size = CONFIG_SYS_SDRAM_SIZE;
+
+	zynq_ddrc_init();
+
+	return 0;
+}
+#endif
diff --git a/board/ettus/e3xx/xil_io.h b/board/ettus/e3xx/xil_io.h
new file mode 100644
index 0000000000..1eccf8d91d
--- /dev/null
+++ b/board/ettus/e3xx/xil_io.h
@@ -0,0 +1,13 @@
+/*
+ * SPDX-License-Identifier:    GPL-2.0+
+ */
+
+#ifndef XIL_IO_H           /* prevent circular inclusions */
+#define XIL_IO_H
+
+/*
+ * This empty file is here because ps7_init_gpl.c exported by hw project
+ * has #include "xil_io.h" line.
+ */
+
+#endif /* XIL_IO_H */
diff --git a/common/spl/spl_fat.c b/common/spl/spl_fat.c
index 60b85f082d..15254ec0ed 100644
--- a/common/spl/spl_fat.c
+++ b/common/spl/spl_fat.c
@@ -91,6 +91,8 @@ int spl_load_image_fat(struct spl_image_info *spl_image,
 				    (u8 *)(uintptr_t)spl_image->load_addr, 0);
 	}
 
+	printf("%s: error reading image %s, done!\n",
+	       __func__, filename);
 end:
 #ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
 	if (err <= 0)
diff --git a/configs/zynq_e3xx_1_defconfig b/configs/zynq_e3xx_1_defconfig
new file mode 100644
index 0000000000..887cb76334
--- /dev/null
+++ b/configs/zynq_e3xx_1_defconfig
@@ -0,0 +1,48 @@
+CONFIG_ARM=y
+CONFIG_ARCH_ZYNQ=y
+CONFIG_TARGET_ETTUS_E3XX_1=y
+CONFIG_DEFAULT_DEVICE_TREE="zynq-e3xx-1"
+CONFIG_SYS_TEXT_BASE=0x4000000
+CONFIG_SPL=y
+CONFIG_SPL_OS_BOOT=y
+CONFIG_SPL_DM_SEQ_ALIAS=y
+CONFIG_SPL_MMC_SUPPORT=y
+CONFIG_SPL_FAT_SUPPORT=y
+CONFIG_FIT=y
+CONFIG_FIT_VERBOSE=y
+CONFIG_FIT_SIGNATURE=y
+CONFIG_HUSH_PARSER=y
+CONFIG_SYS_PROMPT="e3xx-sg1-uboot>"
+# CONFIG_CMD_IMLS is not set
+# CONFIG_CMD_FLASH is not set
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_USB=y
+# CONFIG_CMD_SETEXPR is not set
+CONFIG_CMD_TFTPPUT=y
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_EXT2=y
+CONFIG_CMD_EXT4=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_CMD_FAT=y
+CONFIG_CMD_FS_GENERIC=y
+CONFIG_MMC_SDHCI=y
+CONFIG_MMC_SDHCI_ZYNQ=y
+CONFIG_OF_EMBED=y
+CONFIG_NET_RANDOM_ETHADDR=y
+# CONFIG_DISPLAY_CPUINFO is not set
+CONFIG_ZYNQ_GEM=y
+CONFIG_ZYNQ_SERIAL=y
+# CONFIG_MTD_NOR_FLASH is not set
+CONFIG_ENV_FAT_INTERFACE="mmc"
+CONFIG_ENV_FAT_DEVICE_AND_PART="0:1"
+CONFIG_ENV_FAT_FILE="uboot.env"
+CONFIG_USB=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_ULPI_VIEWPORT=y
+CONFIG_USB_ULPI=y
+CONFIG_USB_STORAGE=y
diff --git a/configs/zynq_e3xx_3_defconfig b/configs/zynq_e3xx_3_defconfig
new file mode 100644
index 0000000000..536f604b13
--- /dev/null
+++ b/configs/zynq_e3xx_3_defconfig
@@ -0,0 +1,48 @@
+CONFIG_ARM=y
+CONFIG_ARCH_ZYNQ=y
+CONFIG_TARGET_ETTUS_E3XX_3=y
+CONFIG_DEFAULT_DEVICE_TREE="zynq-e3xx-3"
+CONFIG_SYS_TEXT_BASE=0x4000000
+CONFIG_SPL=y
+CONFIG_SPL_OS_BOOT=y
+CONFIG_SPL_DM_SEQ_ALIAS=y
+CONFIG_SPL_MMC_SUPPORT=y
+CONFIG_SPL_FAT_SUPPORT=y
+CONFIG_FIT=y
+CONFIG_FIT_VERBOSE=y
+CONFIG_FIT_SIGNATURE=y
+CONFIG_HUSH_PARSER=y
+CONFIG_SYS_PROMPT="e3xx-sg3-uboot>"
+# CONFIG_CMD_IMLS is not set
+# CONFIG_CMD_FLASH is not set
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_USB=y
+# CONFIG_CMD_SETEXPR is not set
+CONFIG_CMD_TFTPPUT=y
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_EXT2=y
+CONFIG_CMD_EXT4=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_CMD_FAT=y
+CONFIG_CMD_FS_GENERIC=y
+CONFIG_MMC_SDHCI=y
+CONFIG_MMC_SDHCI_ZYNQ=y
+CONFIG_OF_EMBED=y
+CONFIG_NET_RANDOM_ETHADDR=y
+# CONFIG_DISPLAY_CPUINFO is not set
+CONFIG_ZYNQ_GEM=y
+CONFIG_ZYNQ_SERIAL=y
+# CONFIG_MTD_NOR_FLASH is not set
+CONFIG_ENV_FAT_INTERFACE="mmc"
+CONFIG_ENV_FAT_DEVICE_AND_PART="0:1"
+CONFIG_ENV_FAT_FILE="uboot.env"
+CONFIG_USB=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_ULPI_VIEWPORT=y
+CONFIG_USB_ULPI=y
+CONFIG_USB_STORAGE=y
diff --git a/include/configs/zynq_e3xx_1.h b/include/configs/zynq_e3xx_1.h
new file mode 100644
index 0000000000..262c766875
--- /dev/null
+++ b/include/configs/zynq_e3xx_1.h
@@ -0,0 +1,20 @@
+/*
+ * (C) Copyright 2013 Xilinx, Inc.
+ * (C) Copyright 2015 National Instruments Corp
+ *
+ * Configuration settings for the Ettus Research E3xx
+ * See zynq-common.h for Zynq common configs
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef __CONFIG_ZYNQ_E3XX_1_H
+#define __CONFIG_ZYNQ_E3XX_1_H
+
+#define CONFIG_ZYNQ_I2C0
+#define CONFIG_ZYNQ_EEPROM
+
+#include <configs/zynq-common.h>
+#include <configs/zynq_e3xx_common.h>
+
+#endif /* __CONFIG_ZYNQ_E3XX_1_H */
diff --git a/include/configs/zynq_e3xx_3.h b/include/configs/zynq_e3xx_3.h
new file mode 100644
index 0000000000..c7f4b4daf6
--- /dev/null
+++ b/include/configs/zynq_e3xx_3.h
@@ -0,0 +1,21 @@
+/*
+ * (C) Copyright 2013 Xilinx, Inc.
+ * (C) Copyright 2015 National Instruments Corp
+ *
+ * Configuration settings for the Ettus Research E3xx
+ * See zynq-common.h for Zynq common configs
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef __CONFIG_ZYNQ_E3XX_3_H
+#define __CONFIG_ZYNQ_E3XX_3_H
+
+#define CONFIG_ZYNQ_I2C0
+#define CONFIG_ZYNQ_EEPROM
+
+#include <configs/zynq-common.h>
+#include <configs/zynq_e3xx_common.h>
+
+
+#endif /* __CONFIG_ZYNQ_E3XX_3_H */
diff --git a/include/configs/zynq_e3xx_common.h b/include/configs/zynq_e3xx_common.h
new file mode 100644
index 0000000000..950b01eb47
--- /dev/null
+++ b/include/configs/zynq_e3xx_common.h
@@ -0,0 +1,73 @@
+/*
+ * (C) Copyright 2015 National Instruments Corp
+ *
+ * Common Configuration settings for the Ettus Research E3xx
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef __CONFIG_ZYNQ_E3XX_COMMON_H
+#define __CONFIG_ZYNQ_E3XX_COMMON_H
+
+#define CONFIG_ZYNQ_E3XX_MEM_TEST
+#define CONFIG_ZYNQ_E3XX_MEM_TEST_START 0
+#define CONFIG_ZYNQ_E3XX_MEM_TEST_SIZE 0x00001000
+
+/* we'll need to overridedefault zynq stuff */
+#ifdef CONFIG_EXTRA_ENV_SETTINGS
+#undef CONFIG_EXTRA_ENV_SETTINGS
+#endif
+
+#define CONFIG_EXTRA_ENV_SETTINGS	\
+	"fit_image=fitImage\0"		\
+	"load_addr=0x2000000\0"		\
+	"fit_size=0x800000\0"		\
+	"fdt_high=0xffffffff\0"		\
+	"initrd_high=0x20000000\0"	\
+	"loadbootenv_addr=0x2000000\0" \
+	"fdt_addr_r=0x1f00000\0"        \
+	"pxefile_addr_r=0x2000000\0"    \
+	"kernel_addr_r=0x2000000\0"     \
+	"scriptaddr=0x3000000\0"        \
+	"ramdisk_addr_r=0x3100000\0"    \
+	"loadbit_addr=0x100000\0"	\
+	"loadbit_size=0x3dbafc\0"	\
+	"bitstream_image=fpga.bin\0"	\
+	"bootenv=uEnv.txt\0" \
+	"bootenv_dev=mmc\0" \
+	"loadbootenv=load ${bootenv_dev} 0 ${loadbootenv_addr} ${bootenv}\0" \
+	"importbootenv=echo Importing environment from ${bootenv_dev} ...; " \
+		"env import -t ${loadbootenv_addr} $filesize\0" \
+	"bootenv_existence_test=test -e ${bootenv_dev} 0 /${bootenv}\0" \
+	"setbootenv=if env run bootenv_existence_test; then " \
+			"if env run loadbootenv; then " \
+				"env run importbootenv; " \
+			"fi; " \
+		"fi; \0" \
+	"sd_loadbootenv=set bootenv_dev mmc && " \
+			"run setbootenv \0" \
+	"usb_loadbootenv=set bootenv_dev usb && usb start && run setbootenv \0" \
+	"preboot=if test $modeboot = sdboot; then " \
+			"load mmc 0 ${loadbit_addr} ${bitstream_image} && " \
+			"fpga load 0 ${loadbit_addr} ${filesize}; " \
+			"run sd_loadbootenv; " \
+			"echo Checking if uenvcmd is set ...; " \
+			"if test -n $uenvcmd; then " \
+				"echo Running uenvcmd ...; " \
+				"run uenvcmd; " \
+			"fi; " \
+		"fi; \0" \
+	"sdboot=echo Copying FIT from SD to RAM... && " \
+		"load mmc 0 ${load_addr} ${fit_image} && " \
+		"bootm ${load_addr}\0" \
+	"jtagboot=echo TFTPing FIT to RAM... && " \
+		"tftpboot ${load_addr} ${fit_image} && " \
+		"bootm ${load_addr}\0" \
+	"usbboot=if usb start; then " \
+			"echo Copying FIT from USB to RAM... && " \
+			"load usb 0 ${load_addr} ${fit_image} && " \
+			"bootm ${load_addr}; fi\0" \
+		DFU_ALT_INFO \
+		BOOTENV
+
+#endif /* __CONFIG_ZYNQ_E3XX_COMMON_H */
diff --git a/scripts/config_whitelist.txt b/scripts/config_whitelist.txt
index 9ce0c3f039..d2e3278bae 100644
--- a/scripts/config_whitelist.txt
+++ b/scripts/config_whitelist.txt
@@ -5176,6 +5176,9 @@ CONFIG_ZLT
 CONFIG_ZM7300
 CONFIG_ZYNQMP_EEPROM
 CONFIG_ZYNQMP_XHCI_LIST
+CONFIG_ZYNQ_E3XX_MEM_TEST
+CONFIG_ZYNQ_E3XX_MEM_TEST_SIZE
+CONFIG_ZYNQ_E3XX_MEM_TEST_START
 CONFIG_ZYNQ_EEPROM
 CONFIG_ZYNQ_EEPROM_BUS
 CONFIG_ZYNQ_GEM_EEPROM_ADDR
-- 
2.14.3

